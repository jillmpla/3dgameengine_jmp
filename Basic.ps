#version 330 core

layout(location=0) out vec4 out_color;
 
in vec4 vertexColor;
in vec4 viewPos;
in vec3 viewNormal;

struct Light {
	vec4 pos;
	vec4 color;
};

uniform Light light;
uniform float shiny;
uniform int matChoice;

vec3 kd;
vec3 ks;

void main()
{	
	vec3 P = viewPos.xyz;
	vec3 N = normalize(viewNormal); //surface normal
	
	vec3 L;
	float radialAt;
	
	//////////////////point light//////////////////
	if (light.pos.w > 0) {
		vec3 vectoLight = vec3(light.pos.xyz - P);
		float d = ((length(vectoLight))/4.0);
		radialAt = 1.0/(d*d + 1.0);
		L = vec3(vectoLight);
		L = normalize(L);
		//out_color = L;
	}
	
	else { //////////////////directional light//////////////////
		L = normalize(light.pos.xyz);              //light vector
		radialAt = 0.75;                          //radial attenuation
		}
		float diffuse1 = max(0, dot(N, L));             //diffuse
		vec3 V = normalize(-P);                         //view direction
		vec3 H = normalize(V+L);                        //half-vector
		float speckyComponent = max(0, dot(H, N));      //specular
		float speckyComponent1 = pow(speckyComponent, shiny);
		
		//surface color
		if (matChoice == 1) {
			kd = vec3(1,0,0); //red
		}
		else {
			kd = vertexColor.xyz;
		}
		
		//specular color
		ks = vec3(1.0);
		
		vec3 finalColor = light.color.xyz*diffuse1*radialAt*(kd+speckyComponent1*ks);
		out_color = vec4(finalColor, 1.0);
	
	
	
	//out_color = vertexColor;
}
